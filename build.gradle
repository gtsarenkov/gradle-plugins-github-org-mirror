plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    testImplementation libs.spock.core
    testImplementation 'org.slf4j:slf4j-api:2.0.0'
    //testImplementation 'ch.qos.logback:logback-classic:1.2.10'
    testImplementation 'ch.qos.logback:logback-core:1.2.10'

    testRuntimeOnly 'org.slf4j:jcl-over-slf4j:2.0.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

gradlePlugin {
    // Define the plugin
    plugins {
        githubOrganizationRepositoryMirror {
            id = 'com.jdisc.toolchain.github-organization-repo-mirror'
            implementationClass = 'com.jdisc.toolchain.GitHubOrganizationRepositoriesMirrorPlugin'
        }
    }
}

group = 'com.jdisc.toolchain'
version = '0.9.0'

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
